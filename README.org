#+TITLE: Emacs Configuration
#+AUTHOR: Eugene Rwagasore

* Installing Emacs
On macOS, [[https://brew.sh][homebrew]] is the defacto package manager.
I install Emacs with following parameters:
- ~--HEAD~ :: To pull the latest development version of emacs
- ~--with-cocoa~ :: Build emacs with macOS graphical UI
- ~--with-imagemagick@6~ :: Build Emacs with imagemagick for image processing
- ~--with-librsvg~ :: Build Emacs with librsvg for SVG(vector images) processing
- ~--with-gnutls~ :: Build Emacs with gnuTLS to enable encrypted SSL and TLS connection
#+BEGIN_SRC sh
  brew install emacs --HEAD --with-cocoa --with-imagemagick@6 --with-libsvg --with-gnutls
#+END_SRC

* Personal Information
#+begin_src emacs-lisp
(setq user-full-name "Eugene Rwagasore"
      user-mail-address "rwagasore@gmail.com")
#+end_src

* Customize settings
Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]]. 
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+end_src

* Themes
#+BEGIN_SRC emacs-lisp
  (push "~/.emacs.d/themes" custom-theme-load-path)
  (load-theme 'darkness t)
#+END_SRC

* Sane defaults
Let's start with some sane defaults, shall we?
Sources for this section include [[https://github.com/magnars/.emacs.d/blob/master/settings/sane-defaults.el][Magnars Sveen]] and [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]].
#+begin_src emacs-lisp
  ;; These functions are useful. Activate them.
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
  (put 'dired-find-alternate-file 'disabled nil)

  ;; Answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Keep all backup and auto-save files in one directory
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

  ;; UTF-8 please
  (setq locale-coding-system 'utf-8) ; pretty
  (set-terminal-coding-system 'utf-8) ; pretty
  (set-keyboard-coding-system 'utf-8) ; pretty
  (set-selection-coding-system 'utf-8) ; please
  (prefer-coding-system 'utf-8) ; with sugar on top

  (setq-default indent-tabs-mode nil)
  (setq-default indicate-empty-lines t)

  ;; Don't count two spaces after a period as the end of a sentence.
  ;; Just one space is needed.
  (setq sentence-end-double-space nil)

  ;; delete the region when typing, just like as we expect nowadays.
  (delete-selection-mode t)

  (show-paren-mode t)

  (column-number-mode t)

  (global-visual-line-mode)
  (diminish 'visual-line-mode)

  (setq uniquify-buffer-name-style 'reverse)
  (setq uniquify-separator "|")
  (setq uniquify-after-kill-buffer-p t)
  (setq uniquify-ignore-buffers-re "^\\*")

  ;; -i gets alias definitions from .bash_profile
  (setq shell-command-switch "-ic")

  ;; Don't beep at me
  (setq visible-bell t)

  ;; dependable keybindings
  (bind-key "\C-c l" 'goto-line)
  (bind-key "\C-c n" 'rename-buffer)
  (bind-key "<C-s-return>" 'toggle-frame-fullscreen)

  ;; buffer switching
  (bind-key "s-{" 'previous-buffer)
  (bind-key "s-}" 'next-buffer)
#+end_src

The following function for ~occur-dwim~ is taken from [[https://github.com/abo-abo][Oleh Krehel]] from
[[http://oremacs.com/2015/01/26/occur-dwim/][his blog post at (or emacs]]. It takes the current region or the symbol
at point as the default value for occur.

#+begin_src emacs-lisp
(defun occur-dwim ()
  "Call `occur' with a sane default."
  (interactive)
  (push (if (region-active-p)
            (buffer-substring-no-properties
             (region-beginning)
             (region-end))
          (thing-at-point 'symbol))
        regexp-history)
  (call-interactively 'occur))

(bind-key "M-s o" 'occur-dwim)
#+end_src
* Fonts & Text rendering settings
[[https://www.fsd.it/shop/fonts/pragmatapro/][Pragmata Pro]] is one of well designed monospaced font
One of its character multi language and ligature support
#+BEGIN_SRC emacs-lisp
  (setq-default line-spacing 5)
  (setq-default line-pixel-height 5)
  (add-to-list 'default-frame-alist '(font . "PragmataPro-15"))
#+END_SRC

Highlighting special text within any buffer
#+BEGIN_SRC emacs-lisp
  (defun watchwords ()
    "Convert words mentioned below into keywords."
    (font-lock-add-keywords
     nil '(("\\<\\(FIXIT\\|TODO\\|FIXME\\|HACK\\|REFACTOR\\|NOCOMMIT\\)"
            1 font-lock-warning-face t))))

  (add-hook 'prog-mode-hook 'watchwords)
#+END_SRC

Enable ligature support for Pragmata Pro. Details are here [[https://github.com/fabrizioschiavi/pragmatapro][Pragmata Pro Github Repo]]
#+BEGIN_SRC emacs-lisp
  (setq prettify-symbols-unprettify-at-point 'right-edge)

  (defconst pragmatapro-prettify-symbols-alist
    (mapcar (lambda (s)
              `(,(car s)
                .
                ,(vconcat
                  (apply 'vconcat
                         (make-list
                          (- (length (car s)) 1)
                          (vector (decode-char 'ucs #X0020) '(Br . Bl))))
                  (vector (decode-char 'ucs (cadr s))))))
            '(("[ERROR]"   #XE380)
              ("[DEBUG]"   #XE381)
              ("[INFO]"    #XE382)
              ("[WARN]"    #XE383)
              ("[WARNING]" #XE384)
              ("[ERR]"     #XE385)
              ("[FATAL]"   #XE386)
              ("[TRACE]"   #XE387)
              ("[FIXME]"   #XE388)
              ("[TODO]"    #XE389)
              ("[BUG]"     #XE38A)
              ("[NOTE]"    #XE38B)
              ("[HACK]"    #XE38C)
              ("[MARK]"    #XE38D)
              ("!!"        #XE900)
              ("!="        #XE901)
              ("!=="       #XE902)
              ("!!!"       #XE903)
              ("!≡"        #XE904)
              ("!≡≡"       #XE905)
              ("!>"        #XE906)
              ("!=<"       #XE907)
              ("#("        #XE920)
              ("#_"        #XE921)
              ("#{"        #XE922)
              ("#?"        #XE923)
              ("#>"        #XE924)
              ("##"        #XE925)
              ("#_("       #XE926)
              ("%="        #XE930)
              ("%>"        #XE931)
              ("%>%"       #XE932)
              ("%<%"       #XE933)
              ("&%"        #XE940)
              ("&&"        #XE941)
              ("&*"        #XE942)
              ("&+"        #XE943)
              ("&-"        #XE944)
              ("&/"        #XE945)
              ("&="        #XE946)
              ("&&&"       #XE947)
              ("&>"        #XE948)
              ("$>"        #XE955)
              ("***"       #XE960)
              ("*="        #XE961)
              ("*/"        #XE962)
              ("*>"        #XE963)
              ("++"        #XE970)
              ("+++"       #XE971)
              ("+="        #XE972)
              ("+>"        #XE973)
              ("++="       #XE974)
              ("--"        #XE980)
              ("-<"        #XE981)
              ("-<<"       #XE982)
              ("-="        #XE983)
              ("->"        #XE984)
              ("->>"       #XE985)
              ("---"       #XE986)
              ("-->"       #XE987)
              ("-+-"       #XE988)
              ("-\\/"      #XE989)
              ("-|>"       #XE98A)
              ("-<|"       #XE98B)
              (".."        #XE990)
              ("..."       #XE991)
              ("..<"       #XE992)
              (".>"        #XE993)
              (".~"        #XE994)
              (".="        #XE995)
              ("/*"        #XE9A0)
              ("//"        #XE9A1)
              ("/>"        #XE9A2)
              ("/="        #XE9A3)
              ("/=="       #XE9A4)
              ("///"       #XE9A5)
              ("/**"       #XE9A6)
              (":::"       #XE9AF)
              ("::"        #XE9B0)
              (":="        #XE9B1)
              (":≡"        #XE9B2)
              (":>"        #XE9B3)
              (":=>"       #XE9B4)
              (":("        #XE9B5)
              (":-("       #XE9B6)
              (":)"        #XE9B7)
              (":-)"       #XE9B8)
              (":/"        #XE9B9)
              (":\\"       #XE9BA)
              (":3"        #XE9BB)
              (":D"        #XE9BC)
              (":P"        #XE9BD)
              (":>:"       #XE9BE)
              (":<:"       #XE9BF)
              ("<$>"       #XE9C0)
              ("<*"        #XE9C1)
              ("<*>"       #XE9C2)
              ("<+>"       #XE9C3)
              ("<-"        #XE9C4)
              ("<<"        #XE9C5)
              ("<<<"       #XE9C6)
              ("<<="       #XE9C7)
              ("<="        #XE9C8)
              ("<=>"       #XE9C9)
              ("<>"        #XE9CA)
              ("<|>"       #XE9CB)
              ("<<-"       #XE9CC)
              ("<|"        #XE9CD)
              ("<=<"       #XE9CE)
              ("<~"        #XE9CF)
              ("<~~"       #XE9D0)
              ("<<~"       #XE9D1)
              ("<$"        #XE9D2)
              ("<+"        #XE9D3)
              ("<!>"       #XE9D4)
              ("<@>"       #XE9D5)
              ("<#>"       #XE9D6)
              ("<%>"       #XE9D7)
              ("<^>"       #XE9D8)
              ("<&>"       #XE9D9)
              ("<?>"       #XE9DA)
              ("<.>"       #XE9DB)
              ("</>"       #XE9DC)
              ("<\\>"      #XE9DD)
              ("<\">"      #XE9DE)
              ("<:>"       #XE9DF)
              ("<~>"       #XE9E0)
              ("<**>"      #XE9E1)
              ("<<^"       #XE9E2)
              ("<!"        #XE9E3)
              ("<@"        #XE9E4)
              ("<#"        #XE9E5)
              ("<%"        #XE9E6)
              ("<^"        #XE9E7)
              ("<&"        #XE9E8)
              ("<?"        #XE9E9)
              ("<."        #XE9EA)
              ("</"        #XE9EB)
              ("<\\"       #XE9EC)
              ("<\""       #XE9ED)
              ("<:"        #XE9EE)
              ("<->"       #XE9EF)
              ("<!--"      #XE9F0)
              ("<--"       #XE9F1)
              ("<~<"       #XE9F2)
              ("<==>"      #XE9F3)
              ("<|-"       #XE9F4)
              ("<<|"       #XE9F5)
              ("==<"       #XEA00)
              ("=="        #XEA01)
              ("==="       #XEA02)
              ("==>"       #XEA03)
              ("=>"        #XEA04)
              ("=~"        #XEA05)
              ("=>>"       #XEA06)
              ("=/="       #XEA07)
              ("≡≡"        #XEA10)
              ("≡≡≡"       #XEA11)
              ("≡:≡"       #XEA12)
              (">-"        #XEA20)
              (">="        #XEA21)
              (">>"        #XEA22)
              (">>-"       #XEA23)
              (">=="       #XEA24)
              (">>>"       #XEA25)
              (">=>"       #XEA26)
              (">>^"       #XEA27)
              (">>|"       #XEA28)
              (">!="       #XEA29)
              ("??"        #XEA40)
              ("?~"        #XEA41)
              ("?="        #XEA42)
              ("?>"        #XEA43)
              ("???"       #XEA44)
              ("?."        #XEA45)
              ("^="        #XEA48)
              ("^."        #XEA49)
              ("^?"        #XEA4A)
              ("^.."       #XEA4B)
              ("^<<"       #XEA4C)
              ("^>>"       #XEA4D)
              ("^>"        #XEA4E)
              ("\\\\"      #XEA50)
              ("\\>"       #XEA51)
              ("\\/-"      #XEA52)
              ("@>"        #XEA57)
              ("|="        #XEA60)
              ("||"        #XEA61)
              ("|>"        #XEA62)
              ("|||"       #XEA63)
              ("|+|"       #XEA64)
              ("|->"       #XEA65)
              ("|-->"      #XEA66)
              ("|=>"       #XEA67)
              ("|==>"      #XEA68)
              ("|>-"       #XEA69)
              ("|<<"       #XEA6A)
              ("||>"       #XEA6B)
              ("|>>"       #XEA6C)
              ("~="        #XEA70)
              ("~>"        #XEA71)
              ("~~>"       #XEA72)
              ("~>>"       #XEA73)
              ("[["        #XEA80)
              ("]]"        #XEA81)
              ("\">"       #XEA90)
              )))

  (defun add-pragmatapro-prettify-symbols-alist ()
    (dolist (alias pragmatapro-prettify-symbols-alist)
      (push alias prettify-symbols-alist)))

  (add-hook 'prog-mode-hook #'add-pragmatapro-prettify-symbols-alist)
#+END_SRC


Enable glyph rendering and use whitespace-mode
#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)

  (use-package whitespace
    :bind ("\C-c w" . whitespace-mode))
#+END_SRC
* macOS customizations
#+BEGIN_SRC emacs-lisp
  ;; enable sRGB colors with emacs cocoa version
  (setq ns-use-srgb-colorspace t)

  ;; disable macOS unfriendly keyboard behavior
  (set-keyboard-coding-system nil)

  ;; Don't make new frames when opening a new file with Emacs
  (setq ns-pop-up-frames nil)
#+END_SRC
* Shell configurations
Preprocess commands sent to shell prompt and
process differently clear, man commands
#+BEGIN_SRC emacs-lisp
  (defun shell-command-preprocessor (proc command)
    "Various commands pre-processing before sending to shell"
    (cond
     ;; Checking for clear command and execute it.
     ((string-match "^[ \t]*clear[ \t]*$" command)
      (comint-send-string proc "\n")
      (erase-buffer))
   
     ;; Checking for man command and execute it.
     ((string-match "^[ \t]*man[ \t]*" command)
      (comint-send-string proc "\n")
      (setq command (replace-regexp-in-string "^[ \t]*man[ \t]*" "" command))
      (setq command (replace-regexp-in-string "[ \t]+$" "" command))
      ;;(message (format "command %s command" command))
      (funcall 'man command))
   
     ;; Send other commands to the default handler.
     (t (comint-simple-send proc command))))


  (defun shell-mode-proprocessor-hook ()
    "shell mode preprocessing customizations"
    (local-set-key '[up] 'comint-previous-input)
    (local-set-key (kbd "\C-p") 'comint-previous-input)
    (local-set-key '[down] 'comint-next-input)
    (local-set-key (kbd "\C-n") 'comint-next-input)
    (local-set-key '[(shift tab)] 'comint-next-matching-input-from-input)
    (setq comint-input-sender 'shell-command-preprocessor))

  (ansi-color-for-comint-mode-on)
  (add-hook 'shell-mode-hook 'shell-mode-proprocessor-hook)
#+END_SRC

~exec-path-from-shell~ makes the command-line path with Emacs’s shell match the same one on macOS.

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns))
    :ensure t
    :init
    (exec-path-from-shell-initialize))
#+END_SRC
* IDO
#+BEGIN_SRC emacs-lisp
  (use-package ido
    :init
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode t)
    (use-package ido-vertical-mode
      :ensure t
      :defer t
      :init (ido-vertical-mode t)
      (setq ido-vertical-define-keys 'C-n-and-C-p-only)))
#+END_SRC
* SMEX
#+BEGIN_SRC emacs-lisp
  (defun cached-smex ()
    "Convert previous commands into keywords"
    (interactive)
    (or (boundp 'smex-cache)
        (smex-initialize)) (smex))

  (use-package smex
    :ensure t
    :bind ("\C-x\C-m" . cached-smex))
#+END_SRC
* Cursor styling
#+BEGIN_SRC emacs-lisp
  (setq-default cursor-type '(bar . 1)
                blink-cursor-delay 0
                blink-cursor-interval 0.4)
#+END_SRC
* Scratch
#+BEGIN_SRC emacs-lisp
  (use-package scratch
    :defer t
    :commands scratch)
#+END_SRC
* Zoom-frm
#+BEGIN_SRC emacs-lisp
  (use-package zoom-frm
    :ensure t
    :bind (("C-x s-=" . zoom-in/out)
           ("C-x <s-return>" . toggle-zoom-frame))
    :config
    (setq frame-zoom-font-difference 10))
#+END_SRC
* Smartscan
#+BEGIN_SRC emacs-lisp
  (use-package smartscan
    :ensure t
    :config (global-smartscan-mode t)
    :bind (("s-n" . smartscan-symbol-go-forward)
           ("s-p" . smartscan-symbol-go-backward)))
#+END_SRC
* Smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :defer t
    :diminish smartparens-mode
    :config
    (require 'smartparens-config)
    ;; Set up some pairings for org mode markup. These pairings won't
    ;; activate by default; they'll only apply for wrapping regions.
    (sp-local-pair 'org-mode "~" "~" :actions '(wrap))
    (sp-local-pair 'org-mode "/" "/" :actions '(wrap))
    (sp-local-pair 'org-mode "*" "*" :actions '(wrap)))
#+END_SRC
* Multiple cursors
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :defer t
    :bind (("C-s-c C-s-c" . mc/edit-lines)
           ("C->"         . mc/mark-next-like-this)
           ("C-<"         . mc/mark-previous-like-this)
           ("C-c C-<"     . mc/mark-all-like-this)
           ("C-!"         . mc/mark-next-symbol-like-this)
           ("s-d"         . mc/mark-all-dwim)))
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status)
    :config
    (define-key magit-status-mode-map (kbd "q") 'magit-quit-session))
#+END_SRC
* Docker
  #+BEGIN_SRC emacs-lisp
    (use-package dockerfile-mode
      :ensure t)

    (use-package docker-compose-mode
      :ensure t)

    (use-package docker-tramp
      :ensure t)
  #+END_SRC

* Tramp
#+BEGIN_SRC emacs-lisp
  (use-package tramp
    :defer t)
#+END_SRC
* Company mode
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config 
    (setq company-idle-delay 0.3)
    (setq company-tooltip-limit 20)
    (setq company-minimum-prefix-length 1)
    (setq company-echo-delay 0)
  
    (add-hook 'after-init-hook 'global-company-mode)
  
    (eval-after-load 'company
    `(let (( Map  company-active-map))
       (define-key company-active-map (kbd "\C-n") 'company-select-next)
       (define-key company-active-map (kbd "\C-n") 'company-select-next)
       (define-key company-active-map (kbd "\C-p") 'company-select-previous)
       (define-key company-active-map (kbd "\C-d") 'company-show-doc-buffer)
       (define-key company-active-map (kbd "<tab>") 'company-complete))))
  
  
#+END_SRC

* Rainbow mode
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :defer t)
#+END_SRC

* Web mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :init
    (add-to-list 'auto-mode-alist '("\\.js[x]?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode)))
#+END_SRC

* Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode (("\\.markdown\\'" . markdown-mode)
           ("\\.md\\'"       . markdown-mode)))
#+END_SRC
* Python settings
#+BEGIN_SRC emacs-lisp
  ;; enable eldoc mode for python files
  (add-hook 'python-mode-hook 'eldoc-mode)

  (use-package anaconda-mode
    :ensure t
    :config (add-hook 'python-mode-hook 'anaconda-mode))

  (use-package company-anaconda
    :ensure t
    :config
    (eval-after-load "company" '(add-to-list 'company-backends 'company-anaconda)))

  (use-package pyenv-mode
    :ensure t
    :config (pyenv-mode))
#+END_SRC
